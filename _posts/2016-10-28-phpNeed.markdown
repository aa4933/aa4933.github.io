---
layout:     post
title:      "所谓PHP的模块化思想"
subtitle:   "reflection"
date:       2016-10-28 18:11:00
author:     "wulihh"
header-img: "img/post-bg-2016-07_09.jpg"
tags:
    - PHP
---
> 'About PHP'


##### 有关于所谓PHP的模块化思想

个人认为这其实是一种规范，这种规范会使整个项目的可拓展性非常高

而且这种规范，即使一个人离职，其他人也能快速接替上去

从企业管理的角度，这是一种非常重要的思想

节约人力成本，不至于为了某个人使整个项目崩坏


* 1.工厂


上个文章说到依赖注入

我感觉太过于决绝

工厂的思想可能没有我想的那么简单

* 2.依赖

各大方法，路由入口，可以通过减少依赖，来获取模块的重用

减少工作时间

* 3.规范

其次可以做出命名与相关model与control的规范说明

以达到代码套路一模一样的整齐效果

---------------------------------------------------------

附录，一个php的套路要求

文档&图表
-----
* 使用Markdown编写常见技术、流程、需求文档
* 使用UML建模工具需求、设计等相关流程进行绘制

PHP
-----
##### 版本特性
* 各版本间“不向后兼容的变更”、“新特性”以及“已废止的特性”
* 命名空间、闭包、静态晚绑定、上传进度、traits...
* Mysql扩展：ext/mysql、MySQLi 或 PDO_MySQL
* 魔术引号
* 其它

##### 常用方法和技巧
1. for, while可能出的性能问题
2. 熟练应用string, array, date...
3. PHP手册

##### 编码规范
1. 理解设置编码规范的目的（团队协作基石）
2. 了解常见的编码风格，并可以调整自我进行适应
3. 遵守既有的规则，完整规范

##### 开发框架和设计模式
1. 理解MVC，明确引入此模式是要解决什么问题
2. 常用设计模式：工厂、单例、代理...
3. 掌握lxsphp
	* 项目模块架构
	* 常用组件使用
	* 其它
	
##### 算法的理解和实现
* 排序（冒泡排序法，插入排序法...）
* 搜索（二分法...）
* 树（trie）
* 其它

Linux
-----
1. apache, nginx, openresty
	* 服务器安装与配置
	* 性能优化
	* 使用场景
2. mysql, redis, memcache
	* mysql引擎选择、索引、分析优化SQL
	* nosql系统的场景对比选择、集群使用
3. haproxy, nginx
	* 负载均衡
4. 常用的shell命令
	* [部署] cron, nohup ...
	* [流和管理] grep, sed, awk, sort ...
	* [用户和权限] sudo ...

Html / Css / JS
-----
1. 熟练编写html文档
2. 掌握javascript（以及了解各种语法标准）
3. 理解css的盒模型
4. 了解前端集成开发框架（Vue.js ...）

性能优化
-----
1. 前端优化
	1. 请求合并
	2. 缓存机制
2. 缓存优化
	1. PHP加速器:APC、XCachee、Accelerator...
	2. 页面缓存，如静态化页面
	3. 数据缓存，如redis, memcache
3. 数据库优化
	* 参考曹政的mysql优化实践...

其它语言要求
-----
* Bash
* Golang
* Python
* Node.js
...

大数据和架构
-----
* 离线统计 hadoop + pig
* 实时统计 storm
* 分布式存档检测系统

未归类
-----
* 项目如何发布(rsync)
* 项目如果开发(samba, svn)
* 项目开发工具(phpStorm, xShell)


技术现状：
=====

主要技术
-----
1. lamp下基于“lxsphp”的web项目开发（redis, scribe, thrift...）
2. php | golang | bash 的统计项目
3. 未来技术发展
	* 数据挖掘分析
	* 联机解决方案
	* ...

项目现状
-----
1. svn://192.168.50.144/kfpt2/Readme.md
2. 小项目、运营、运维项目开发
3. 日常维护
4. 重构...