---
layout:     post
title:      "影响mysql性能的因素-引擎篇"
subtitle:   "Mysql"
date:       2017-07-21 10:52:00
author:     "wuilly"
header-img: "http://ww3.sinaimg.cn/large/006tKfTcgy1fj5bumqe45j30dc08caad.jpg"
tags:
    - Mysql
---
> 'About engine'

### 数据库存储引擎的选择
    
- [ ] 首先我们要了解到最基本的mysql架构

![](http://ww4.sinaimg.cn/large/006tNbRwgy1fgm079v36rj30xm0g8gpf.jpg)

    mysql这种插件式的存储引擎，使得mysql存储引擎多姿多彩，各种各样
    我们可以根据自己场景来选择最适合我们的存储引擎
    
1. MyISAM

---

* 构成

> 一说起这个存储引擎，其实很多人都非常了解，
> 在`mysql5.5`之前版本默认都是使用这个存储引擎，
> 这个存储引擎由两个最主要的`.MYD`与`.MYI`组成，

---

* 杂论

> 让人印象深刻的是，这个引擎，当读或者写操作的时候，是会进行锁表操作，表级锁，读取与写入互斥，对于读写混合并发性能很差，有时候我们在读取的时候，可以在最后行插入，如果仅仅是只读，共享锁不会阻塞共享锁，并发行还是良好

> 当表出现问题的时候，我们修复的方法是`check table tablename`与`repair table tablename` 进行修复


---

* 特性

> 支持索引，在mysql5.7之前，唯一一个官方支持`全文索引`的引擎

> 支持表压缩，`myisampack`，压缩完毕以后，变为只读属性

> mysql5.0以前，有单表数据最大的限制4g，后来变为了256tb，足够了

---

* 场景

> 非事务性应用，多读不写，就是这个引擎最好的场景

> 只读类应用，报表应用，空间类应用，在`mysql5.7`以前，唯一一个支持空间函数的引擎，如gps，位置等

2.Innodb

---

* 构成

> `mysql5.5`及以后默认存储引擎，
> 这个存储引擎由两个最主要的`.ibd`组成，

---

* 杂论

> 这个引擎最大的特性就是使用一种`表空间`的概念进行存储，

> 表空间分为独立表空间与系统表空间，在mysql5.6以后默认都是独立，

> 表空间，一个影响的关键参数是`innodb_file_per_table`当值为on的时候

> 说明你的独立表空间打开了，

> 两个优缺点，我只建议独立表空间，以前遇到一个坑，就是磁盘不够了，就删除了一些数据，结果发现系统表空间没办法自己收缩空间大小，浪费了很多的空间，如果要解决，必须要删除数据，重建，而且要重启mysql服务，影响很大，系统表空间会产生IO瓶颈

如何转移从系统表空间到独立表空间

![](http://ww3.sinaimg.cn/large/006tNbRwgy1fgm19oqo3rj30w40ecwhq.jpg)

    系统表空间，Innodb数据字典信息，就是存储在系统表空间
    Undo回滚段，在mysql5.6之前存储于系统表空间，之后可以存在独立表空间
    
---

* 特性

> Innodb是一种事务性存储引擎

> 完全支持事务的ACID特性

> 日志：Redo log（顺序写入）于Undo log（随机读写）的配合使用

> 支持行级锁

> 行级锁，可以最大支持并发操作
    
> 行级锁由存储引擎层实现


    什么是锁？
    
    管理共享资源的并发访问
    锁用于事务的隔离性
    
    锁的类型？
    
    共享锁（读锁）
    独占锁（写锁）
    
    锁的粒度？
    
    表级锁
    行级锁
    
    阻塞和死锁？
    
    阻塞：两个事务，前面占用后面资源，过多的阻塞会占用系统资源，性能下降
    死锁：多个事务，互相占用资源，产生异常，少量死锁会自动对最少资源进行释放处理，但是大量的死锁会造成巨大的问题
    
> 状态检查

    show engine innodb status


---

* 场景

> 适用于大多数OLTP应用

3.CSV

---

* 构成

> 数据以文本形式存储

> .csv文件形式存储

---

* 特性

> 所有列不能为空

> 不支持索引，不用于大表，不适合在线处理

> 可以对数据直接编辑，直接保存文本

---

* 场景

> 适合作为数据交换中间表

4.Archive

---

* 构成

> 以zlib对表数据进行压缩，磁盘io更少

> 后缀为`ARZ`为后缀的文件中

---

* 特性

> 只支持`INSRT`与`SELECT`操作

> 只允许在自增ID列上增加索引

---

* 场景

> 日志和数据采集类应用

5.Memory

---

* 构成

> 也称为HEAP存储引擎，所以数据保存在内存中

---

* 杂论

> 重启服务以后，表结构会留下，但是数据会消失

> 由于使用的是表级锁，性能不一定会好

![](http://ww1.sinaimg.cn/large/006tNc79gy1fj53jz0ftlj30ww0d8tcz.jpg)

---

* 特性

> 支持HASH（等值查找）和Btree（范围查找）索引

> 所有字段都为固定长度varchar(10)=char(10)

> 不支持BLOG和TEXT等大字段

> 最大大小由max_heap_table_size参数决定

---

* 场景

> 用于查找或者是映射表，例如邮编和地区的对应表

> 用于保存数据分析中产生的中间表

> 用于缓存周期性聚合数据的结果表

> （Memory数据易丢失，所以要求数据可再生）


6.Federated

---

* 杂论

> 这个引擎一般是禁止的，启用需要在启动时候加上参数

![](http://ww4.sinaimg.cn/large/006tKfTcgy1fj54by5jy2j30xk0c6n03.jpg)

---

* 特性

> 提供了访问远程mysql服务器上表的方法

> 本地不存储数据，数据全部放在远程服务器上

> 本地需要保存表结构和远程服务器的连接信息

---

* 场景

> 偶尔的统计分析和手工查询

#### 如何选择存储引擎

选择参考条件

* 事务
* 备份
* 奔溃恢复
* 存储引擎特有特性

- [ ] 注意：不要混合使用存储引擎
