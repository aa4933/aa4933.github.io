---
layout:     post
title:      "java开发有感"
subtitle:   "java"
date:       2017-01-05 09:11:00
author:     "wulihh"
header-img: "img/post-bg-2016-07_09.jpg"
tags:
    - java
---
> 'About java'

### 关于最近一段时间的java开发设计有感


由于一些个人原因，需要写一个小型的java项目，由于各种原因，出于需求原因

同时要满足以下条件

* 简单快捷
* 同时满足超越其他普通jsp的项目架构
* 样式做到足够出彩，有足够的可拓展性

本身选用的架构是`jsp+servlet+javabean`

也就是jsj架构

但是出于折腾的因素，我瞄准了ssm（`spring+springMVC+mybatis`）

尝试着组合了一下框架，但是太不熟练了，完全陌生的转向ssm架构，问题很多，第一天就出现了配置的问题，更不用说后续的各种问题了

当然我现在是以搭建成功的情况下回顾我的架构搭建过程，现在想来，解决java框架搭建的重要关键就是

* 解决web.xml(类似于php的`.hatccess`) 
* 解决spring与springmvc的结合，以及配置
* 解决spring与mybatis的结合，以及配置

最终很不幸的是，我并没有完成最后一步，然后导致了一个问题，就是缺失了db

然后我尝试着去搭建自己较为熟悉的ssh框架，同时请求同学帮忙搭建一个ssm的demo

在我看着视频搭建ssh框架到一半的时候，同学已经搭建好了ssm的demo（我勒个去，滑稽脸）

然后我就恬不知耻的把他的ssm拿过来用了

同时让他教我idea的使用方法

然后我就开始了java的开发之旅


----------------------------------------------


### java入门

第一天就遇到了特别多的问题，首先就是路由的问题，java的spring采用一种依赖注入的方式进行注解阐述，一开始真的会

`特别不适应`，但是后面上手了以后就会感觉就像飞起来一样

`@controller`

用注解去声明当前类的作用，或者映射相应的url来以便于解决大部分的路由问题

一开始使用的使用`mapping`的方法使用的很不熟练，而且出现很多的笑话问题，不过还好有我的同学一点一点孜孜不倦的教我

解决了

* 分组
* 路径url
* 部署tomcat
* 编译java
* jdbc单例模式
* jstl模版引擎
* request与response
* model模版映射
* 容器注入，自动装配
* main函数测试
* 实体`_`命名容器
* 资源不过滤	<mvc:xxxxxxxx>
* 页面与request编码
* 对象存储与泛型 `List<T>`
* 空指针异常捕捉 
* 类型转换  `Interger.parseInt()`
* 最近插入id补充  `SELECT last_insert_id()`
* 统一编码格式  `<pageEncoding="utf-8">`

### 依赖注入，控制反转

以前专门写过一篇关于这个的文章，但是好像写的太过于片面和绝对性，现在总结以前的工厂模式和现在容器注入的思想

好像又多了一点理解，说不出的感觉，可能是对编程思想的进一步理解和升华吧


